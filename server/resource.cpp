//Use http://tomeko.net/online_tools/file_to_hex.php to convert an favicon.ico into hex readable as an array
char favicon[] = {
0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x10, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x68, 0x04, 
0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 
0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x12, 0x0B, 
0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 
0xFF, 0xFF, 0xFB, 0xFC, 0xFF, 0xFF, 0xFD, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 
0xFF, 0xFF, 0xF4, 0xF5, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x56, 0x64, 
0xEE, 0xFF, 0x66, 0x72, 0xEF, 0xFF, 0xDD, 0xE0, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0x8D, 
0xF2, 0xFF, 0x0B, 0x1F, 0xE6, 0xFF, 0x95, 0x9D, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x79, 0x80, 
0xF1, 0xFF, 0x00, 0x00, 0xE1, 0xFF, 0x0A, 0x1A, 0xE5, 0xFF, 0x9D, 0xA6, 0xF5, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFD, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFC, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC5, 0xCA, 0xF9, 0xFF, 0x00, 0x0C, 
0xE4, 0xFF, 0x01, 0x13, 0xE5, 0xFF, 0x00, 0x0E, 0xE4, 0xFF, 0xCF, 0xD3, 0xFA, 0xFF, 0xE5, 0xE7, 
0xFC, 0xFF, 0x0A, 0x1E, 0xE6, 0xFF, 0x00, 0x11, 0xE4, 0xFF, 0x08, 0x15, 0xE5, 0xFF, 0xD6, 0xDA, 
0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFB, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x88, 0x90, 0xF3, 0xFF, 0x00, 0x05, 
0xE3, 0xFF, 0x08, 0x11, 0xE4, 0xFF, 0x00, 0x01, 0xE2, 0xFF, 0x72, 0x7B, 0xF0, 0xFF, 0xF7, 0xF8, 
0xFE, 0xFF, 0x0C, 0x1F, 0xE6, 0xFF, 0x05, 0x19, 0xE5, 0xFF, 0x00, 0x08, 0xE3, 0xFF, 0x82, 0x8A, 
0xF2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFB, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8E, 0x95, 0xF3, 0xFF, 0x00, 0x12, 
0xE4, 0xFF, 0x98, 0xA1, 0xF4, 0xFF, 0x14, 0x27, 0xE7, 0xFF, 0x57, 0x62, 0xED, 0xFF, 0xB0, 0xB6, 
0xF7, 0xFF, 0x00, 0x0C, 0xE4, 0xFF, 0x0B, 0x1E, 0xE6, 0xFF, 0x00, 0x08, 0xE3, 0xFF, 0x63, 0x6D, 
0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFD, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCB, 0xCF, 0xFA, 0xFF, 0x5C, 0x69, 
0xEE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x56, 0x63, 0xEE, 0xFF, 0x21, 0x33, 0xE8, 0xFF, 0x2A, 0x3A, 
0xE9, 0xFF, 0x00, 0x05, 0xE3, 0xFF, 0x07, 0x17, 0xE5, 0xFF, 0x00, 0x08, 0xE3, 0xFF, 0x7E, 0x87, 
0xF2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0xE2, 0xE5, 
0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x46, 0x55, 0xEC, 0xFF, 0x00, 0x08, 0xE3, 0xFF, 0x00, 0x0C, 
0xE4, 0xFF, 0x3E, 0x4D, 0xEB, 0xFF, 0x25, 0x37, 0xE9, 0xFF, 0x00, 0x0B, 0xE4, 0xFF, 0xCD, 0xD1, 
0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFD, 0xFD, 0xFF, 0xFF, 0x2C, 0x3D, 0xE9, 0xFF, 0x00, 0x04, 0xE3, 0xFF, 0x57, 0x63, 
0xEE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x46, 0x4F, 0xEB, 0xFF, 0x59, 0x65, 0xEE, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFD, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x44, 0x50, 0xEB, 0xFF, 0x00, 0x04, 0xE3, 0xFF, 0xC6, 0xCB, 
0xF9, 0xFF, 0xFD, 0xFD, 0xFF, 0xFF, 0x74, 0x7F, 0xF1, 0xFF, 0xF1, 0xF2, 0xFE, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xA0, 0xA7, 0xF5, 0xFF, 0x00, 0x02, 0xE3, 0xFF, 0xD5, 0xD9, 
0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF5, 0xF6, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5B, 0x68, 0xEE, 0xFF, 0xA2, 0xAA, 
0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 0xFA, 0xFE, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEE, 0xEF, 0xFD, 0xFF, 0xCF, 0xD3, 
0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

#include  "server.h"
#include "request.h"

#define CHUNK_LENGTH 512
static char* pChunk;
static int   length;

#define NO_MORE_CHUNKS 0
#define MORE_CHUNKS    1
#define CHUNK_ERROR    2

static int  whatToSendToId[4];
static int chunkToSendToId[4]; //0 == do nothing

static int getChunk(int whatToSend, int chunk)
{
    switch (whatToSend)
    {
        case REQUEST_ICO:
            pChunk = favicon + (chunk - 1) * CHUNK_LENGTH;
            length = favicon + sizeof(favicon) - pChunk;
            break;
        default:
            pChunk = 0;
            length = 0;
            return CHUNK_ERROR;
    }
            
    if (length > CHUNK_LENGTH) length = CHUNK_LENGTH;
    if (length >= 0) return MORE_CHUNKS;
    else             return NO_MORE_CHUNKS;
}


int ResourceInit()
{
    for (int id = 0; id < 4; id++)
    {
         whatToSendToId[id] = 0;
        chunkToSendToId[id] = 0;
    }
    return 0;
}
void ResourceStart(int id, int whatToSend)
{
     whatToSendToId[id] = whatToSend;
    chunkToSendToId[id] = 1;           //Set up the next line to send to be the first
}
int ResourceGetNextChunkToSend(int id, int* pLength, char** ppBuffer)
{    
    if (chunkToSendToId[id] == 0) return SERVER_NOTHING_TO_SEND;
    
    int chunkResult = getChunk(whatToSendToId[id], chunkToSendToId[id]);
    
    *pLength = length;
    *ppBuffer = pChunk;    
    
    switch (chunkResult)
    {
        case MORE_CHUNKS:
            chunkToSendToId[id] += 1;
            return SERVER_MORE_TO_SEND;
        case NO_MORE_CHUNKS:
            chunkToSendToId[id] = 0;
            return SERVER_NO_MORE_TO_SEND;
        default:
            return SERVER_ERROR;
    }
}
