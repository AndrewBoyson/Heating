Real Time Clock is set in UTC.

RtcSet and RtcGet use a uint64_t count of seconds since 1970 with a decimal point at RTC_RESOLUTION_BITS 11.
This gives a resolution of half a millisecond and a maximum count at 300 million years into the future.

Setting the RTC
===============
set_time works but does not set day of week which renders it useless for a central heating controller unless localtime is used
(which provides utc not local time; gmtime does not work) but that means that to get the day of week would require a round trip
from RTC (pretty much a struct tm) to a count of seconds only to go back to a struct tm.
RtcSet uses TimeToTmUtc(wholeseconds, &tm) to properly configure the RTC. It also takes the fractional part of the second to initialise a one second timer.

Getting time from the RTC
=========================
uint64_t RtcGet();                      //Returns the count of seconds plus the fractional part from timer1 plus the fracional part from when set.
void     RtcGetTmUtc(struct tm* ptm);   //Very quick map of RTC registers to a struct tm
void     RtcGetTmLocal(struct tm* ptm); //A struct tm adjusted for the local timezone

Backup life
===========
Have 0.5F capacitor. Initially charged to 3.1v (measured).
Oscillator is ok down to 2.1v (spec sheet) + 0.6v diode drop = 2.7v.
Current draw is 27uA (mbed rather than m3 battery draw)
A 1F capacitor will drop 1 volt per amp per second so Time (s) = Capacitance (F) x Voltage (v) / Current (A)

t (s) = 0.5 * (3.1 - 2.7) / 27e-6 = 1,000,000 * 0.2 / 27 = 2 hours
